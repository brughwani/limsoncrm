name: Deploy to Firebase on pr

on:
  push:
    branches:
      - dev  # Change to your production branch (e.g., master, production)
    paths:
      - '**'  # Watch all files

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Flutter with built-in caching
        uses: subosito/flutter-action@v2
        id: flutter-setup # Added this ID to reference the action's outputs
        with:
          channel: 'stable'
          cache: true
          cache-key: ${{ runner.os }}-flutter-${{ hashFiles('pubspec.lock') }}

      - name: Cache pub packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            .dart_tool
          key: ${{ runner.os }}-pub-${{ hashFiles('pubspec.lock') }}

      #          cache-path: |
      #            ~/.pub-cache,.dart_tool,/opt/hostedtoolcache/flutter

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Use a recent LTS version
      #
      #      # This step finds the Flutter SDK and adds it to the PATH
      #      - name: Find and Add Flutter to PATH
      #        run: |
      #       # Find the Flutter directory and add it to the GITHUB_PATH
      #          echo "$(find / -name "flutter" -type d -print -quit)/bin" >> $GITHUB_PATH

      - name: Verify Node and NPM installation
        run: |
          node -v
          npm -v
      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Verify Dart and Flutter
        run: |
          echo "Flutter version: $(flutter --version)"
          echo "Dart version: $(dart --version)"

      # Install Flutter dependencies only once
      - name: Install Flutter dependencies
        run: flutter pub get

      # Install Firebase CLI globally using npm
      - name: Install Firebase Tools
        run: |
          npm install -g firebase-tools
      # Use a new step to update and verify the flutterfire_cli version
      # New step to deactivate the old version and activate the latest
      # New step to deactivate the old version and activate the latest
      # Manually download and install flutterfire_cli to bypass pub issues
      # Manually download and install flutterfire_cli to bypass pub issues
      - name: Activate FlutterFire CLI
        run: dart pub global activate flutterfire_cli
      - name: Build web dev
        run:
          |
          
          rm build/web/flutter_service_worker.js
          flutter clean
          flutter build web --profile --pwa-strategy=none
      - name: Remove Flutter service worker for staging
        if: github.ref_name == 'dev'
        run: |
            if [ -f build/web/flutter_service_worker.js ]; then
            rm build/web/flutter_service_worker.js
            fi

      # ðŸ‘‡ This step handles staging deploys (dev branch)
      - name: Deploy to Firebase Staging
        if: github.ref == 'refs/heads/dev'
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
            repoToken: '${{ secrets.GITHUB_TOKEN }}'
            firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_LIMSONCRM }}'
            projectId: '${{ secrets.FIREBASE_PROJECT_ID }}'
            target: 'limsoncrm-dev'
            channelId: live

#
#      - name: Deploy to Firebase
#        uses: FirebaseExtended/action-hosting-deploy@v0
#        with:
#          repoToken: '${{ secrets.GITHUB_TOKEN }}'
#          #FIREBASE_TOKEN: '${{ secrets.FIREBASE_TOKEN }}'
#          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_LIMSONCRM }}'
#          projectId: "${{ secrets.FIREBASE_PROJECT_ID }}"
#          target: "limsoncrm-dev"
#          # Remove channelId for production deployment
#          channelId: 'pr-${{ github.event.number }}'
