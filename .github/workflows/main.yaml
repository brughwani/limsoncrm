name: Deploy to Firebase on Commit

on:
  push:
    branches:
      - main  # Change to your production branch (e.g., master, production)
    paths:
      - '**'  # Watch all files

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Flutter with built-in caching
        uses: subosito/flutter-action@v2
        id: flutter-setup # Added this ID to reference the action's outputs
        with:
          channel: 'stable'
          cache: true
          cache-key: ${{ runner.os }}-flutter-${{ hashFiles('pubspec.lock') }}
          cache-path: |
            ~/.pub-cache,.dart_tool,/opt/hostedtoolcache/flutter

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Use a recent LTS version

      # This step finds the Flutter SDK and adds it to the PATH
      - name: Find and Add Flutter to PATH
        run: |
       # Find the Flutter directory and add it to the GITHUB_PATH
          echo "$(find / -name "flutter" -type d -print -quit)/bin" >> $GITHUB_PATH

      - name: Verify Node and NPM installation
        run: |
          node -v
          npm -v

      - name: Verify Dart and Flutter
        run: |
          echo "Flutter version: $(flutter --version)"
          echo "Dart version: $(dart --version)"

      # Install Flutter dependencies only once
      - name: Install Flutter dependencies
        run: flutter pub get

      # Install Firebase CLI globally using npm
      - name: Install Firebase Tools
        run: |
          npm install -g firebase-tools
      # Use a new step to update and verify the flutterfire_cli version
      # New step to deactivate the old version and activate the latest
      # New step to deactivate the old version and activate the latest
      # Manually download and install flutterfire_cli to bypass pub issues
      # Manually download and install flutterfire_cli to bypass pub issues
      - name: Activate FlutterFire CLI
        run: dart pub global activate flutterfire_cli

      - name: Generate Firebase Options Securely
        run: |
          flutter pub global activate flutterfire_cli
          cat > firebase_config.json <<EOF
          {
           "projectId": "${{ secrets.FIREBASE_PROJECT_ID }}",
           "appId": "${{ secrets.FIREBASE_APP_ID }}",
           "apiKey": "${{ secrets.FIREBASE_API_KEY }}",
           "authDomain": "${{ secrets.FIREBASE_AUTH_DOMAIN }}",
           "storageBucket": "${{ secrets.FIREBASE_STORAGE_BUCKET }}",
           "measurementId": "${{ secrets.FIREBASE_MEASUREMENT_ID }}",
           "messagingSenderId": "${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}"
          }
          EOF
          
          flutter pub global run flutterfire_cli:flutterfire configure \
            --project=${{ secrets.FIREBASE_PROJECT_ID }} \
            --platforms=web \
            --out=lib/firebase_options.dart \
            --yes \
            
          
          rm firebase_config.json
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      - name: Build web release
        run: flutter build web --release --wasm

      - name: Deploy to Firebase
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          #FIREBASE_TOKEN: '${{ secrets.FIREBASE_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_LIMSONCRM }}'
          projectId: limsoncrm
#          target: 'build/web'
          # Remove channelId for production deployment
#          channelId: 'pr-${{ github.event.number }}'

#name: Build and Deploy Web App
#on:
#  push:
#    branches:
#      - main
#jobs:
#  hosting:
#    name: Deploy Website
#    runs-on: ubuntu-latest
#    steps:
#      # Checkout Repository
#      - uses: actions/checkout@v3
#
#      # Install Flutter command
#      - name: Install flutter
#      - uses: subosito/flutter-action@v2
#        with:
#          channel: "stable"
#      - run: flutter --version
#
#      # Build Website
#      - name: Build Website
#      - run: |
#          flutter clean
#          flutter pub get
#          flutter build web --release
#        working-directory: ./
#
#      - name: Install FlutterFire CLI
#        run: |
#                dart pub global activate flutterfire_cli
#
#      - name: Configure Firebase Options
#        run: |
#              flutterfire configure \
#                --project=limsoncrm \
#                --web \
#                --out=lib/firebase_options.dart
#        env:
#              FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
#
##      - name: Install dependencies
##        run: flutter pub get
#
##      - name: Build web app
##        run: |
##                flutter clean
##                flutter pub get
##                flutter build web --release
##        working-directory: ./
#      # Deploy Firebase Hosting
#      - name: Deploy Firebase Hosting
#        uses: w9jds/firebase-action@master
#        with:
#          args: deploy --only hosting:limsoncrm
#        env:
#          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
#          PROJECT_PATH: ./build/web
